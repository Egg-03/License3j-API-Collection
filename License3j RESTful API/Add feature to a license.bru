meta {
  name: Add feature to a license
  type: http
  seq: 4
}

post {
  url: {{base-url}}/api/license/addfeature?featureName=licensedTo&featureType=STRING&featureContent=Eggy
  body: none
  auth: none
}

params:query {
  featureName: licensedTo
  featureType: STRING
  featureContent: Eggy
}

docs {
  A license in License3j is a collection of features. Each feature has
  
  - a name,
      
  - a type and
      
  - a value (or content)
      
  
  The name can be any string you like, but there are some predefined names that have special meaning for the license management library. These are the following:
  
  - `licenseId` the unique id of the license (`UUID`)
      
  - `licenseSignature` the signature of the license (`BINARY`)
      
  - `signatureDigest` the digest of the license that was signed (`STRING`)
      
  - `expiryDate` the expiry date of the license (`DATE`)
      
  
  A featureâ€™s type can be
  
  - `BINARY` can contain an arbitrary binary value that is retrieved by the Java code as a `byte[]` array
      
  - `STRING` can contain any string, will be retrieved as `java.lang.String`
      
  - `BYTE` contains a single byte value.
      
  - `SHORT` contains a single short value
      
  - `INT` contains an integer (`int`) value
      
  - `LONG` contains a long value
      
  - `FLOAT` contains a float value
      
  - `DOUBLE` contains a double value
      
  - `BIGINTEGER` contains a big integer value
      
  - `BIGDECIMAL` contains a big decimal value
      
  - `DATE` contains a date value
      
  - `UUID` contains a UUID value
      
  
  The value of the different features can be retrieved as the corresponding Java object or as a primitive value if there is a matching primitive type. There is no automatic conversion between the different types of the features.
}
